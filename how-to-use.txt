const express = require('express')
const cors = require('cors')

// will use this later to send requests
const http = require('http')
//import env variables 
//require('dotenv').config()
const app = express()
app.use(cors())
const port = process.env.PORT || 3000
app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.get('/', (req, res) => { res.status(200).send('Server is working.') })
app.listen(port, () => { console.log(`Server is running at http://localhost:${port}`) })
app.post('/getNonCuratedSOP', (req, res) => {
  const queryToSearch = req.body.result && req.body.result.parameters && req.body.result.parameters.queryText ? req.body.result.parameters.queryText : ''
  
  const DiscoveryV1 = require('ibm-watson/discovery/v1');
  const { IamAuthenticator } = require('ibm-watson/auth');
  
  const discovery = new DiscoveryV1({
    version: '2019-04-30',
    authenticator: new IamAuthenticator({
      apikey: 'FoCZ3NFhcrdIm4hkBFkwrUEFabpLGpjsWo0YHrcsPdGO',
    }),
    serviceUrl: 'https://api.us-south.discovery.watson.cloud.ibm.com/instances/0da4091d-41e5-41fb-926d-6c5d6ee244de',
  });
  
  const queryParams = {
    environmentId: 'deba6f43-8290-4f31-9543-b89369b8d466',
    collectionId: '20c3bbd4-cdf8-420a-ac0d-07a4416b9ebc',
    naturalLanguageQuery: queryToSearch,
  };
  
  discovery.query(queryParams)
    .then(queryResponse => {
      console.log(JSON.stringify(queryResponse, null, 2));
      return res.send(queryResponse, null, 2);
    })
    .catch(err => {
      console.log('error:', err);
    });


})

app.post('/getDetectedIntent', (req, res) => {
  //console.log('Reached getDetectedIntent');
  const query = req.body.result && req.body.result.parameters && req.body.result.parameters.queryText ? req.body.result.parameters.queryText : ''
  console.log('Query ===', query);
  const dialogflow = require('@google-cloud/dialogflow');
  //console.log('dialogflow ===', dialogflow);
  // Instantiates a session client
  const sessionClient = new dialogflow.SessionsClient();
  detectIntent();
  async function detectIntent(){
    //console.log('Inside async function');
    // The path to identify the agent that owns the created intent.
    const sessionPath = sessionClient.projectAgentSessionPath(
      'telecom-poc',
      '1223456654'
    );

    // The text query request.
    const request = {
      session: sessionPath,
      queryInput: {
        text: {
          text: query,
          languageCode: 'EN',
        },
      },
    };

    /*if (contexts && contexts.length > 0) {
      request.queryParams = {
        contexts: contexts,
      };
    }*/
    const responses = await sessionClient.detectIntent(request);
    console.log('Intent === ', responses[0].queryResult.intent.displayName);
    return res.send(responses[0].queryResult.intent.displayName);
  }
  
})



